# we inherit it from vitis
import zipfile

from hls4ml.backends.vitis.passes.fifo_depth_optimization import (
    generate_depths_file,
    initialize_large_fifos,
    set_optimized_fifo_depths,
)
from hls4ml.model.optimizer.optimizer import ConfigurableOptimizerPass, ModelOptimizerPass


def get_vitis_optimized_fifo_depths(model, cus_hls_prj_path=None):
    """Parse the files generated by the co-simulation to retrieve the optimized depths for the FIFOs.
    Attention, only the FIFOs between the layers are profiled!

    Args:
        model (ModelGraph): The model to which FIFO depth optimization is applied.

    Returns:
        Dict[str, int]: A dictionary that contains the FIFO names as keys and the optimized depths as values.
    """
    # channel.zip is generated after the co-simulation and contains the chan_status*.csv files
    # in the chan_status*.csv files the max depth achieved during co-simulation can be found at the last (4th) line

    if cus_hls_prj_path is None:
        cus_hls_prj_path = model.config.get_output_dir() + '/' + model.config.get_project_name() + '/_prj/solution1'

    path_to_zip_file = cus_hls_prj_path + '/.autopilot/db/channel_depth_info/'

    with zipfile.ZipFile(f'{path_to_zip_file}channel.zip', 'r') as zip_ref:
        zip_ref.extractall(path_to_zip_file)

    # the channel_info.csv file contains the mapping of each fifo name (i.e layer4_out_U) to the respective
    # chan_status*.csv file
    names_file_path = cus_hls_prj_path + '/.autopilot/db/channel_info.csv'

    csv_fifo_depth_files = {}
    with open(names_file_path) as names_file:
        for _ in range(4):
            next(names_file)
        for line in names_file:
            layer_name = line.split(',')[1]
            csv_file_name = line.split(',')[3][:-1]
            csv_fifo_depth_files[layer_name] = csv_file_name

    optmized_fifo_depths = {}
    for layer_name, file_name in csv_fifo_depth_files.items():
        with open(path_to_zip_file + file_name) as chan_status_file:
            lines = chan_status_file.readlines()
            optmized_fifo_depths[layer_name[:-4]] = int(
                lines[-1]
            )  # remove "_i_U" from the layer name string and keep the last line of the file that contains the max depth

    return optmized_fifo_depths


def execute_cosim_to_profile_fifos(model):
    model.write()
    model.build(
        reset=False,
        csim=False,
        synth=True,
        cosim=False,
        validation=False,
        export=False,
        vsynth=False,
        fifo_opt=True,
        bitfile=False,
        log_to_stdout=False,
    )


class FifoDepthOptimization(ConfigurableOptimizerPass, ModelOptimizerPass):

    def __init__(self):
        self.profiling_fifo_depth = 100_000

    def transform(self, model):
        """Perform FIFO depth optimization between the FIFOs of all layers to reduce resource utilization as the
        initial FIFOs set by hls4ml might be larger than required. At the end of the optimization the FIFOs will
        have the largest depths achieved during co-simulation without causing any deadlocks between the layers
        (producer-consumer), thus no additional delays between the layers. In some cases, this optimization
        might lead to bigger FIFOs than initially set by the hls4ml tool in order to prevent deadlocks.

        Args:
            model (ModelGraph): The model to which FIFO depth optimization is applied.

        Raises:
            ValueError: If the FIFO depth for profiling provided by the user is not a non-negative integer.
            RuntimeError: If the IO type is not set to "io_stream".

        Returns:
            bool: The execution state of the Optimizer Pass
        """

        if not isinstance(self.profiling_fifo_depth, int) or self.profiling_fifo_depth <= 0:
            raise ValueError('The FIFO depth for profiling (profiling_fifo_depth variable) must be a non-negative integer.')

        # check axi-stream or io-stream
        if not (model.config.get_config_value('IOType') == 'io_stream'):
            raise RuntimeError('To use this optimization you have to set `IOType` field to `io_stream` in the HLS config.')

        hlsPrjPath = model.config.backend.writer.mg.get_vitis_hls_exec_dir(model)

        initial_fifo_depths = initialize_large_fifos(model, self.profiling_fifo_depth)
        execute_cosim_to_profile_fifos(model)
        optimized_fifo_depths = get_vitis_optimized_fifo_depths(model, cus_hls_prj_path=hlsPrjPath + "/hls")
        generate_depths_file(model, initial_fifo_depths, optimized_fifo_depths)
        set_optimized_fifo_depths(model, optimized_fifo_depths)

        print('FIFO optimization completed')

        return False
